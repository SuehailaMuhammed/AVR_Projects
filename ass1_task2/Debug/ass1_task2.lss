
ass1_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006e8  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define PORTD *((u8*)0x32)
#define DDRD  *((u8*)0x31)
#define PIND  *((volatile u8*)0x30)

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	DDRA=0;
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	10 82       	st	Z, r1

	while (1){
		for(int i=0;i<8;i++){
  7e:	1c 82       	std	Y+4, r1	; 0x04
  80:	1b 82       	std	Y+3, r1	; 0x03
  82:	25 c0       	rjmp	.+74     	; 0xce <main+0x62>
		DDRA |=(1<<i);
  84:	aa e3       	ldi	r26, 0x3A	; 58
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ea e3       	ldi	r30, 0x3A	; 58
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	28 2f       	mov	r18, r24
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0b 80       	ldd	r0, Y+3	; 0x03
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x30>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	0a 94       	dec	r0
  9e:	e2 f7       	brpl	.-8      	; 0x98 <main+0x2c>
  a0:	82 2b       	or	r24, r18
  a2:	8c 93       	st	X, r24
		PORTA |=(1<<i);
  a4:	ab e3       	ldi	r26, 0x3B	; 59
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	eb e3       	ldi	r30, 0x3B	; 59
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	28 2f       	mov	r18, r24
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0b 80       	ldd	r0, Y+3	; 0x03
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x50>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x4c>
  c0:	82 2b       	or	r24, r18
  c2:	8c 93       	st	X, r24
int main(void)
{
	DDRA=0;

	while (1){
		for(int i=0;i<8;i++){
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	9c 81       	ldd	r25, Y+4	; 0x04
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	9c 83       	std	Y+4, r25	; 0x04
  cc:	8b 83       	std	Y+3, r24	; 0x03
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	9c 81       	ldd	r25, Y+4	; 0x04
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	91 05       	cpc	r25, r1
  d6:	b4 f2       	brlt	.-84     	; 0x84 <main+0x18>
		PORTA |=(1<<i);

		}


		for(int i=0;i<8;i++)
  d8:	1a 82       	std	Y+2, r1	; 0x02
  da:	19 82       	std	Y+1, r1	; 0x01
  dc:	16 c0       	rjmp	.+44     	; 0x10a <main+0x9e>
		{
			PORTA &=~(1<<i);
  de:	ab e3       	ldi	r26, 0x3B	; 59
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	eb e3       	ldi	r30, 0x3B	; 59
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	28 2f       	mov	r18, r24
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	09 80       	ldd	r0, Y+1	; 0x01
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <main+0x86>
  fa:	80 95       	com	r24
  fc:	82 23       	and	r24, r18
  fe:	8c 93       	st	X, r24
		PORTA |=(1<<i);

		}


		for(int i=0;i<8;i++)
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	9a 83       	std	Y+2, r25	; 0x02
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	91 05       	cpc	r25, r1
 112:	2c f3       	brlt	.-54     	; 0xde <main+0x72>
 114:	b4 cf       	rjmp	.-152    	; 0x7e <main+0x12>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
